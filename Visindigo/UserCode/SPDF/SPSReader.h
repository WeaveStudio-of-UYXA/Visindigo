#pragma once
#include "../../Visindigo/VICore/VICore.h"
/*

*/
class SPSReader : public VIObject
{
	Q_OBJECT;
	VI_OBJECT;
	_Public def_init SPSReader() {};
	_Public static QStringList spawnAllStoryFile(QString mainFilePath) {
		//find all js file in the folder that contains the main file, and the subfolder of the folder, but ignore any folder with name "Story"
		QString FileFolder = mainFilePath.section('/', 0, -2);
		QStringList allJSFilePath;
		QDirIterator it(FileFolder, QStringList() << "*.js"<<".sps", QDir::Files, QDirIterator::Subdirectories);
		while (it.hasNext()) {
			QString filePath = it.next();
			if (filePath.contains("__story__")) {
				continue;
			}
			allJSFilePath.append(filePath);
		}
		QStringList allStoryFilePath;
		for (auto i = allJSFilePath.begin(); i != allJSFilePath.end(); i++) {
			QString filePath = *i;
			allStoryFilePath.append(spawnStoryFile(filePath));
		}
		return allStoryFilePath;
	}
	_Public static QString spawnStoryFile(QString rawJSFilePath) {
		QString FileFolder = rawJSFilePath.section('/', 0, -2);
		QString StoryFileFolder = FileFolder + "/__story__";
		QString StoryFileName = rawJSFilePath.section('/', -1, -1).section('.', 0, -2).replace(".", "_");
		QString StoryFilePath = StoryFileFolder + "/" + StoryFileName;
		if (!QDir(StoryFileFolder).exists()) {
			QDir().mkpath(StoryFileFolder);
		}
		QFile rawFile;
		rawFile.setFileName(rawJSFilePath);
		rawFile.open(QIODevice::ReadOnly | QIODevice::Text);
		QTextStream rawFileStream(&rawFile);
		rawFileStream.setCodec("UTF-8");
		bool inSPOLComment = false;
		QStringList storyFileContent;
		while (True) {
			QString line = rawFileStream.readLine();
			if (line.isNull()) {
				break;
			}
			if (line == "/*SPOL") {
				inSPOLComment = true;
				continue;
			}
			else if (line == "SPOL*/") {
				inSPOLComment = false;
				continue;
			}
			if (inSPOLComment) {
				storyFileContent.append(line);
			}
		}
		rawFile.close();
		if (storyFileContent.length() == 0) {
			return "";
		}
		QString targetJSCode = "//This document is automatically generated by the SPS parser and will be refreshed every time Visindigo.JS is started. \
\n//Any changes you make will not be saved.\
\n//此文档由SPS解析器自动生成，每次启动Visindigo.JS之前此文件都会被刷新。\n//您的任何更改都不会保存。\n\
export function " + StoryFileName + "_SPOL() {}\n";
		QString StoryPartName = "__head__";
		QString StoryPartContent = "";
		targetJSCode += "\n" + StoryFileName + "_SPOL." + StoryPartName + " = [";
		for (auto i = storyFileContent.begin(); i != storyFileContent.end(); i++) {
			if (i->startsWith("-->")) {
				if (StoryPartName != "") {
					targetJSCode += StoryPartContent + "\"\"];\n";
				}
				StoryPartName = i->mid(3, -1);
				StoryPartContent = "";
				targetJSCode += "\n" + StoryFileName + "_SPOL." + StoryPartName + " = [";
				continue;
			}
			targetJSCode += "\"" + (*i).replace("\\","\\\\").replace("\"", "\\\"") + "\", \n";
		}
		if (StoryPartName != "") {
			targetJSCode += StoryPartContent + "\"\"];\n";
		}
		targetJSCode += "\n";
		QFile targetJSFile;
		targetJSFile.setFileName(StoryFilePath + "_SPOL.js");
		if (targetJSFile.exists()) {
			targetJSFile.remove();
		}
		targetJSFile.open(QIODevice::NewOnly | QIODevice::Text);
		QTextStream targetJSFileStream(&targetJSFile);
		targetJSFileStream.setCodec("UTF-8");
		targetJSFileStream << targetJSCode;
		targetJSFile.close();
		return StoryFilePath;
	}

};